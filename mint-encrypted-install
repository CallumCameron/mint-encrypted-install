#!/bin/bash

function enter-to-continue() {
    echo &&
    read -r -p "Press ENTER to continue..." &&
    echo &&
    echo
}

function yn-y() {
    # Y is the default
    local REPLY
    read -p "${1} [Y/n] " -r
    if [[ $REPLY =~ ^[Nn]$ ]]; then
        return 1
    else
        return 0
    fi
}

function yn-n() {
    # N is the default
    local REPLY
    read -p "${1} [y/N] " -r
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        return 0
    else
        return 1
    fi
}

function read-existing-path() {
    read -r -p "${1}: " name || fail
    if [ -z "${name}" ] || [ ! -e "${name}" ]; then
        echo "That file doesn't exist!" 1>&2
        exit 1
    else
        echo "${name}"
    fi
}

function fail() {
    echo -e "\e[31mSomething went wrong!\e[0m"
    exit 1
}


cat <<EOF &&
This script will guide you through the installation of Linux Mint 18,
fully encrypted (including /boot) using LVM inside LUKS. This works
for both single- and dual-boot setups, and machines with either BIOS
or UEFI. You can use this either to set up encryption from scratch, or
to install/reinstall another Linux inside an encrypted container you
set up in a previous run of this script.

You *MUST* be running this on the Mint live USB, before
installing. Bad things could happen if you run this on an installed
Linux system.

Based on tutorials by Naldi Stefano:
https://community.linuxmint.com/tutorial/view/2026
https://community.linuxmint.com/tutorial/view/2231
https://community.linuxmint.com/tutorial/view/2061
https://community.linuxmint.com/tutorial/view/2191

This is an advanced configuration that assumes you are comfortable
with the terminal, shell scripts, partitioning, LVM, LUKS, and
installing and managing normal non-encrypted Linux systems. If not,
read the tutorials above and make sure you know what you are doing
before continuing!

*PLEASE BE CAREFUL*! If you give incorrect inputs to this script, you
could end up erasing your hard drive. Whatever you want to use it
for, test it in a virtual machine first!
EOF

enter-to-continue &&


# Not completely foolproof, but should do the job...
if ! lsb_release -a 2>/dev/null | grep sarah &>/dev/null || ! type ubiquity &>/dev/null; then
cat <<EOF


You are not running on the Linux Mint 18 installer live USB. Cannot go
any further.
EOF
    exit 1
fi


if [ -f '/sys/firmware/efi' ]; then
    FIRMWARE='uefi'
else
    FIRMWARE='bios'
fi

cat <<EOF
Your firmware is '${FIRMWARE}'. If that doesn't sound right (i.e. you
wanted to boot in UEFI mode but booted in BIOS mode instead), type 'n'
at the prompt and reboot in the correct mode.

EOF

if ! yn-y "Is the firmware mode correct?"; then
    exit 0
fi


USE_TRIM=''
echo
echo
if yn-n "Are you installing on an SSD (rather than a hard disk)?"; then
    cat <<EOF

You can choose to enable TRIM on your SSD. Doing this may improve
performance, but at the cost of slightly reduced security. Read more
at https://wiki.archlinux.org/index.php/Dm-crypt/Specialties, section
'Discard/TRIM support for solid state drives (SSD)'.

As indicated by the warnings on that page, check that your SSD
actually supports TRIM before trying to enable it.

EOF
    if yn-n "Enable TRIM?"; then
        USE_TRIM='t'
    fi
fi


# Tutorial step 1
cat <<EOF


The graphical installer is about to open. When it does, proceed as far
as the 'Installation type' page, and select 'Something else'. Click
next.

You now have two options, depending on what you want to do:


----------------------------------------------------------------------
1. Creating a new encrypted container (e.g. on a machine where you have
never done this before)

Use the installer to create a new partition with the desired
properties, and set 'use as' to 'physical volume for encryption'.

EOF

if [ "${FIRMWARE}" = 'bios' ]; then
cat <<EOF
Your firmware is BIOS:
 - if your disk has a GPT partition table, you need to create a 16 MB
   partition with type 'Reserved BIOS boot area' at the end of the
   disk, in addition to the encrypted partition (if you are
   dual-booting, the previous OS may have already done this).
 - if your disk has an MBR partition table, you don't need any extra
   partitions.
EOF
elif [ "${FIRMWARE}" = 'uefi' ]; then
cat <<EOF
Your firmware is UEFI:
 - you need to create a 512 MB partition with type 'EFI boot
   partition' at the beginning of the disk, in addition to the
   encrypted partition (if you are dual-booting, the previous OS may
   have already done this). Take a note of the name of this partition
   (e.g. something like /dev/sda1), you will need it later.
EOF
else
    fail
fi

cat <<EOF

Click 'OK', wait for the encrypted partition to be created, and
observe the name it is given - this will be something like
'/dev/mapper/sda1_crypt', depending on the partition number used. Keep
a note of this - you will need it later.

Click 'Back' to return to the 'Installation Type' page.

Leave the installer open and switch back to this terminal.


----------------------------------------------------------------------
OR

2. Installing or reinstalling inside an existing encrypted container
(e.g. one created by a previous run of this script)

Click 'Back' in the installer to return to the 'Installation Type'
page.

Leave the installer open and open a new terminal.

Open the encrypted volume with:

    sudo cryptsetup open /dev/<partition> <partition>_crypt

where <partition> should be replaced by the appropriate partition. If
you are using this option, you will already know which partition to
use.


----------------------------------------------------------------------


Press ENTER and the installer will open, and do as instructed above.
EOF

enter-to-continue || fail
sh -c 'ubiquity -b gtk_ui' &

cat <<EOF &&
Once you have done all that, press ENTER again to continue.
EOF

enter-to-continue || fail


CRYPTDEV="$(read-existing-path "Enter the name of the encrypted partition that you noted earlier; this will be something like /dev/mapper/sda1_crypt, but the number may be different. MAKE SURE this is right, or the next set of instructions will probably make you erase your drive!")"
echo

CRYPTPART="$(read-existing-path "Enter the name of the physical partition the encrypted container was created on; e.g. if the encrypted container is /dev/mapper/sda1_crypt, then this will be /dev/sda1 (i.e. the 'sda1' part matches)")"
echo

if [ "${FIRMWARE}" = 'uefi' ]; then
    UEFIBOOT="$(read-existing-path "Enter the name of the UEFI boot partition that you noted earlier; this will be something like /dev/sda1")"
    echo
    read -r -p "Enter the number of the UEFI boot partition that you noted earlier, e.g. if the partition is /dev/sda1, enter 1: " UEFINUMBER || fail
    if [ -z "${UEFINUMBER}" ]; then
        echo 'Invalid partition number'
        fail
    fi
fi


# Tutorial step 2
cat <<EOF &&


Now you need to create logical volumes inside the encrypted
container. Open another terminal.

For a new container, you will need to run something like the following
(note that these are EXAMPLES, and your sizes and names may vary!)

    sudo pvcreate ${CRYPTDEV}
    sudo vgcreate mint ${CRYPTDEV}

    sudo lvcreate -L 4G -n swap mint
    sudo lvcreate -l 100%FREE -n root mint

If you are using an existing container, you will know which logical
volumes you need; now is the time to set them up.

Once you have done that, come back to this terminal and press ENTER to
continue.
EOF

enter-to-continue &&


# Tutorial step 3
cat <<EOF &&
Switch back into the installer. Select 'Something else' and click
'Continue'. You may need to do 'Back' and 'Something else', 'Continue'
several times before your logical volumes show up.

Set up your partitions. Using the example names from the previous
step, you will want to use:

/dev/mapper/mint-root as an Ext4 journalling file system, formatted,
and mounted at /

/dev/mapper/mint-swap as swap area

(If there is a box at the bottom asking where to install the
bootloader, something has gone wrong!)

Click 'Install now', and continue with the rest of the installer.

When the installer finishes, click 'Continue testing', come back to
this terminal, and press ENTER to continue.


Waiting for installer to finish...
EOF

# shellcheck disable=SC2015
wait &&
enter-to-continue || fail


# Tutorial step 4
ROOTDEV="$(read-existing-path "Enter the path of the device where you installed the root partition; using the example names this would be /dev/mapper/mint-root, but yours might be different. MAKE SURE this is right, or it will break your new installation!")" &&

sudo mount "${ROOTDEV}" /mnt &&
sudo mount --bind /dev /mnt/dev &&
sudo mount --bind /dev/pts /mnt/dev/pts &&
sudo mount --bind /sys /mnt/sys &&
sudo mount --bind /proc /mnt/proc &&
# shellcheck disable=SC2015
sudo mount --bind /run /mnt/run || fail

if [ "${FIRMWARE}" = 'uefi' ]; then
    sudo mount "${UEFIBOOT}" /mnt/boot/efi &&

    # Since we don't tell the installer to install a bootloader, it
    # doesn't know what kind we need. It therefore by default installs
    # the packages for a bios bootloader - but we need the efi ones
    # instead.
    sudo chroot /mnt apt-get update &&
    # shellcheck disable=SC2015
    sudo chroot /mnt apt-get -y install grub-efi || fail
fi

KEYFILE='crypto_keyfile.bin' &&

cat <<EOF &&


If you have an existing keyfile from a previous installation which can
already be used to unlock the container, open another terminal now and
copy it to ~/${KEYFILE}

Otherwise, a new keyfile will be created.
EOF

enter-to-continue || fail

if [ -f "${HOME}/${KEYFILE}" ]; then
    sudo cp "${HOME}/${KEYFILE}" "/mnt/${KEYFILE}" || fail
else
    # shellcheck disable=SC2015
    sudo dd bs=512 count=4 if=/dev/urandom of="/mnt/${KEYFILE}" &&
    sudo cryptsetup luksAddKey "${CRYPTPART}" "/mnt/${KEYFILE}" || fail
fi

sudo chmod 000 "/mnt/${KEYFILE}" &&
sudo chmod -R go-rwx /mnt/boot &&


echo "cp /${KEYFILE} \"\${DESTDIR}\"" | sudo tee /mnt/etc/initramfs-tools/hooks/crypto_keyfile &>/dev/null &&
# shellcheck disable=SC2015
sudo chmod +x /mnt/etc/initramfs-tools/hooks/crypto_keyfile || fail

if [ ! -z "${USE_TRIM}" ]; then
    echo "$(basename "${CRYPTDEV}") UUID=$(sudo blkid -s UUID -o value "${CRYPTPART}") /${KEYFILE} luks,discard,keyscript=/bin/cat" | sudo tee -a /mnt/etc/crypttab &>/dev/null || fail
else
    echo "$(basename "${CRYPTDEV}") UUID=$(sudo blkid -s UUID -o value "${CRYPTPART}") /${KEYFILE} luks,keyscript=/bin/cat" | sudo tee -a /mnt/etc/crypttab &>/dev/null || fail
fi

sudo chroot /mnt locale-gen --purge --no-archive &&
sudo chroot /mnt update-initramfs -u &&


sudo sed -i.bak 's/GRUB_HIDDEN_TIMEOUT=0/#GRUB_HIDDEN_TIMEOUT=0/' /mnt/etc/default/grub &&
# shellcheck disable=SC2015
sudo sed -i '10a GRUB_ENABLE_CRYPTODISK=y' /mnt/etc/default/grub || fail

if [ ! -z "${USE_TRIM}" ]; then
    sudo sed -i "s|GRUB_CMDLINE_LINUX=\"\"|GRUB_CMDLINE_LINUX=\"cryptdevice=${CRYPTPART}:$(basename "${CRYPTDEV}"):allow-discards\"|" /mnt/etc/default/grub || fail
else
    sudo sed -i "s|GRUB_CMDLINE_LINUX=\"\"|GRUB_CMDLINE_LINUX=\"cryptdevice=${CRYPTPART}:$(basename "${CRYPTDEV}")\"|" /mnt/etc/default/grub || fail
fi


echo
BOOTLOADER="$(read-existing-path "Enter the device on which the bootloader should be installed; typically /dev/sda, /dev/sdb, or something similar")"


if [ "${FIRMWARE}" = 'bios' ]; then
    sudo chroot /mnt update-grub &&
    sudo chroot /mnt grub-mkconfig -o /boot/grub/grub.cfg &&
    # shellcheck disable=SC2015
    sudo chroot /mnt grub-install "${BOOTLOADER}" || fail
elif [ "${FIRMWARE}" = 'uefi' ]; then
    sudo chroot /mnt update-grub &&
    sudo mkdir -p /mnt/boot/efi/EFI/mint &&
    sudo chroot /mnt grub-mkconfig -o /boot/efi/EFI/mint/grub.cfg &&
    echo "configfile \${cmdpath}/grub.cfg" | sudo tee /mnt/tmp/grub.cfg &>/dev/null &&
    sudo chroot /mnt grub-mkstandalone -d /usr/lib/grub/x86_64-efi/ -O x86_64-efi --compress="xz" --modules="part_gpt part_msdos crypto cryptodisk luks disk diskfilter lvm" --fonts="unicode" -o "/boot/efi/EFI/mint/grubx64.efi"  "boot/grub/grub.cfg=/tmp/grub.cfg" -v &&
    # shellcheck disable=SC2015
    sudo chroot /mnt efibootmgr -c -d "${BOOTLOADER}" -p "${UEFINUMBER}" -L "Mint" -l "\EFI\mint\grubx64.efi" || fail
else
    # Should never get here
    fail
fi


# The problematic file doesn't seem to be present on Mint 18, but just in case...
if [ -e '/mnt/sbin/initctl.REAL' ]; then
    sudo mv /mnt/sbin/initctl /mnt/sbin/initctl.orig &&
    # shellcheck disable=SC2015
    sudo mv /mnt/sbin/initctl.REAL /mnt/sbin/initctl || fail
fi


if [ "${FIRMWARE}" = 'uefi' ]; then
    sudo umount /mnt/boot/efi || fail
fi

sudo umount /mnt/proc /mnt/dev/pts /mnt/dev /mnt/sys /mnt/run /mnt &&


cat <<EOF &&
Congratulations! The installation is now finished.

You should now be able to reboot, and should be prompted for the
password to unlock the encrypted partition at boot.

For extra tips, see the appendices of the tutorials at:
https://community.linuxmint.com/tutorial/view/2026
https://community.linuxmint.com/tutorial/view/2231
https://community.linuxmint.com/tutorial/view/2061
https://community.linuxmint.com/tutorial/view/2191

For other scripts you can use to update the bootloader, or to fix
things if you lose the ability to boot the system, see this script's
repository at:
https://github.com/CallumCameron/mint-encrypted-install
EOF

enter-to-continue || fail
